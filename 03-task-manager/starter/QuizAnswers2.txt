1. In this lesson, you created a middleware function called asyncWrapper. Why?

Answer: The middleware asyncWrapper was created to add a layer of abstraction to
the code to make it more readable and less repetitive by hiding the implementation 
and handling of errors.

2. Suppose that you want to make sure that both a status code and error message 
are send back to the user when they request the URL for a task that does not exist. 
Assume that youâ€™ve created a CustomAPIError class and an error handler that references that class. Complete the code:

const getTask = asyncWrapper(async (req, res, next) => {
  const { id: taskID } = req.params;
  const task = await Task.findOne({ _id: taskID });
  if (!task) {
    return next(createCustomError( `No task with id : ${taskID}`, 404));
  }
  res.status(200).json({ task });
});
